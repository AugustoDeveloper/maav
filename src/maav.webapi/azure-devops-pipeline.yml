name: '$(Rev:rr)'
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'sr/maav.webapi/*'
    - 'src/maav.application/*'
    - 'src/maav.datacontracts/*'
    - 'src/maav.domain/*'
    - 'src/maav.maav.infrastructure.repository.litedb/*'
    - 'src/maav.maav.infrastructure.repository.mongodb/*'
    - 'tools/*'
    exclude:
    - 'src/maav.app/*'
pr:
  branches:
    include:
      - master
  paths:
    include:
    - 'sr/maav.webapi/*'
    - 'src/maav.application/*'
    - 'src/maav.datacontracts/*'
    - 'src/maav.domain/*'
    - 'src/maav.maav.infrastructure.repository.litedb/*'
    - 'src/maav.maav.infrastructure.repository.mongodb/*'
    - 'tools/*'
    exclude:
    - 'src/maav.app/*'
pool:
  vmImage: 'ubuntu-latest'
parameters:
- name: prefixCurrentVersion
  type: string
  default: '0.0.1'
variables:
- name: appVersion
  value: ${{ parameters.prefixCurrentVersion }}
- name: buildCount
  value: $[counter(variables['appVersion'], 0)]
- name: artifactBuildName
  value: 'artifact-build-$(Build.SourceBranchName)-$(Build.BuildId)'
- name: prefixArtifactPreparationName
  value: 'artifact-preparation-$(Build.BuildId)'
stages:
- stage: build_stage
  displayName: 'Build Application'
  jobs: 
  - job: generate_version_job
    displayName: 'Gen. Version'
    continueOnError: true
    variables:
    - group: maav-webapi-development
    - name: commitBuild
      value: $[format('{0}', variables['Build.SourceVersion'])]
    - name: commitBranchName
      value: $[format('{0}', variables['Build.SourceBranchName'])]
    - name: revision
      value: $[format('{0}', variables['Build.BuildNumber'])]
    - name: rollbackVersion
      value: $[format('{0}{1}', variables['appVersion'], variables['buildCount'])]
    steps:
    - powershell: |
        $currentCommit = "$(commitBuild)"
        $endpointCommit = "$(Api:BaseUri)/$(OrgId)/teams/$(TeamCode)/apps/$(AppId)/webhook/$currentCommit"
        $endpointAuth = "$(Api:BaseUri)/$(OrgId)/authenticate"
        $endpointVersion = "$(Api:BaseUri)/$(OrgId)/teams/$(TeamCode)/apps/$(AppId)/version"
        $currentBranchName = "$(commitBranchName)"
        $preRelease = "alpha"
        $currentRevision = "$(revision)"
        $accessToken = ""
        $username = "$(User:Integration)"
        $password = "$(Password:Integration)"

        Write-Host "Commit: $currentCommit"
        Write-Host "Endpoint: $endpointCommit"
        Write-Host "Endpoint: $endpointAuth"
        Write-Host "Endpoint: $endpointVersion"
        Write-Host "Branch: $currentBranchName"
        Write-Host "Branch: $currentBranchName"
        Write-Host "Revision: $currentRevision"

        $auth = @{
            Username = $username
            Password = $password
        } | ConvertTo-Json

        $result = Invoke-RestMethod -Method Post -Body $auth -Uri "$endpointAuth" -ContentType "application/json" -ErrorAction Stop

        $accessToken = $result.accessToken

        $body = @{
            From = $currentBranchName
            To= ''
            Commit = $currentCommit
            Message = 'Automated Build Run Message'
            PreReleaseLabel = $preRelease
            BuildLabel = $currentRevision
        } | ConvertTo-Json

        For ($i=1; $i -lt 5; $i++)
        {
            try
            {
                $response = Invoke-RestMethod -Method Get -Uri "$endpointCommit" -ErrorAction Stop
                $statusCode = $response.StatusCode
                $body = @{
                    From = $response.fromBranch
                    To= $response.toBranch
                    Commit = $currentCommit
                    Message = $response.commitMessage
                    PreReleaseLabel = $preRelease
                    BuildLabel = $currentRevision
                } | ConvertTo-Json

                Write-Host "Status: $statusCode"
                $response
                break
            }
            catch
            {
                $statusCode = $_.Exception.Response.StatusCode.value__
                Write-Host "[$i]Status: $statusCode"
            }

            Start-Sleep 1
        }

        $headers = @{Authorization = "Bearer $accessToken"}
        $body
        $result = Invoke-RestMethod -Method Post -Body $body -Uri "$endpointVersion" -Headers $headers -ContentType "application/json" -ErrorAction Stop
        $major = $result.major;
        $minor = $result.minor;
        $patch = $result.patch;
        $preRelease = $result.preRelease;
        $build = $result.build;
        $version = "$major.$minor.$patch.$(revision)"
        Write-Host "##vso[build.updatebuildnumber]$version"
      displayName: 'Generate Version Script'
      workingDirectory: $(build.sourcesDirectory)
      failOnStderr: true
    - powershell: Write-Host "##vso[build.updatebuildnumber]$(rollbackVersion)"
      condition: and(failed(), in(variables['Build.Reason'], 'IndividualCI','Manual','PullRequest'))
      displayName: 'Rollbac Version'
      workingDirectory: $(build.sourcesDirectory)
      failOnStderr: true
  - template: ../../tools/.pipelines/template-build-netcore.yml
    parameters:
        artifactName: $(artifactBuildName)
        mainProjectName: 'MAAV.WebAPI'
        mainProject: 'src/maav.webapi/MAAV.WebAPI.csproj'
        currentVersion: '$(Build.BuildNumber)'
        outputDirectory: 'app'
        dockerfile: 'Heroku.Dockerfile'
        dockerfilePath: 'src/maav.webapi/'
        deploymentBashFile: 'container-release-heroku.sh'
        deploymentBashPath: 'tools/'
- stage: preparation_stage
  displayName: 'Preparation artifacts'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  dependsOn: build_stage
  variables:
  - group: development-database
  - group: maav-webapi-development
  - name: artifactPreparationName
    value: $[format('{0}.{1}', variables['prefixArtifactPreparationName'], variables['System.StageAttempt'])]
  jobs:
  - job: preparation_job
    displayName: 'Preparation to Deploy'
    steps:
    - checkout: none
    - template: ../../tools/.pipelines/template-preparation-netcore.yml
      parameters:
        artifactName: $(artifactBuildName)
        artifactPreparationName: $(artifactPreparationName)
- stage: deployment_stage
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  dependsOn: preparation_stage
  displayName: 'Deploy Application'
  variables:
  - group: maav-webapi-development
  - name: artifactPreparationName
    value: $[format('{0}.{1}', variables['prefixArtifactPreparationName'], variables['System.StageAttempt'])]
  jobs:
  - job: deploy_job
    displayName: 'Deploy on Heroku'
    steps:
    - checkout: none
    - template: ../../tools/.pipelines/template-deployment-netcore.yml
      parameters:
        artifactName: $(artifactBuildName)
        artifactPreparationName: $(artifactPreparationName)
        appName: 'maav-webapi'
        dockerfile: Heroku.Dockerfile
        deploymentBashFile: 'container-release-heroku.sh'
        argumentBashFile: 'maav-webapi $(Heroku:Api:Token)'